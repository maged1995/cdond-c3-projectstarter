version: 2.1

orbs:
  slack: circleci/slack@4.4.4
  jq: circleci/jq@2.2.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1
      - slack/notify:
          channel: slack-notifications
          event: fail
          template: basic_fail_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            if(( $MEMSTASH_TOKEN ));
            then
              export MEMSTASH_TOKEN=$(curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request \
                GET https://api.memstash.io/values/migration_id)

              if(( $MEMSTASH_TOKEN )); 
              then
                cd ~/project/backend
                npm install
                npm run premigrations:revert
                npm run migrations:revert
              fi
            fi

      - slack/notify:
          channel: slack-notifications
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            cp .env.sample .env
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules, frontend/package.json]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back_end-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules, backend/package.json]
          key: back_end-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend tests
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back_end-build]
      - run:
          name: backend tests
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back_end-build]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "back-end-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "front-end-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - jq/install
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - revert-migrations

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "19:5e:2d:59:98:03:de:fa:72:a3:c8:c0:58:4f:c5:e5"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            pwd
            ansible-playbook .circleci/ansible/configure-server.yml -i inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - ~/project/inventory.txt
      - run:
          name: install curl for failure
          when: on_fail
          command: |
            apk --no-cache add curl jq
      - revert-migrations

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back_end-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run premigrations
            if npm run migrations && ! grep "has been executed successfully"; then
              exit 1
            fi
      - run:
          name: Send migration results to memstash
          command: |
            export WORKFLOW_MIGRATION_ID=migration_$(CIRCLE_WORKFLOW_ID)
            export MEMSTASH_TOKEN=$(curl --request GET https://api.memstash.io/token)
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request \
              PUT --data ${WORKFLOW_MIGRATION_ID} https://api.memstash.io/values/migration_id
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$( tail -n 2 ~/project/inventory.txt )
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp ./dist/ "s3://udapeople-${CIRCLE_WORKFLOW_ID}/
      - jq/install
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "19:5e:2d:59:98:03:de:fa:72:a3:c8:c0:58:4f:c5:e5"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add --update npm
      - restore_cache:
          keys: [back_end-build]
      - run:
          name: Deploy backend
          command: |
            ansible-playbook .circleci/ansible/deploy-backend.yml -i ~/project/inventory.txt
      - run:
          name: install curl for failure
          when: on_fail
          command: |
            apk --no-cache add curl jq
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - revert-migrations

  smoke-test:
    docker:
      - image: ubuntu-2004:202010-01
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt install curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$( tail -n 1 inventory.txt )
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test.
          command: |
            if curl -s ${API_URL}
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "back-end-stack-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "front-end-stack-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      - configure-infrastructure
        # requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
